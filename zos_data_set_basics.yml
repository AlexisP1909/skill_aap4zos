---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  vars:
    tgt_tmp_dir: "/tmp"
  environment: "{{ environment_vars }}"

  tasks:
    # ##########################################################################
    # Generate and set temporary names for data sets
    # ##########################################################################
    - name: Create temp sequential data set name
      command: "mvstmp {{ ansible_user | upper }}"
      register: tmp_ds_seq

    - name: Create temp PDS name
      command: "mvstmp {{ ansible_user | upper }}"
      register: tmp_ds_pds

    - name: Set names for sequential data set and pds for use by this sample
      set_fact:
        data_set_name: "{{ tmp_ds_seq.stdout }}"
        pds_name: "{{ tmp_ds_pds.stdout }}"

    - name: Fact `data_set_name` and `pds_name` set with values
      debug:
        msg:
          - "sequential data set name - {{ data_set_name }}"
          - "pds name - {{ pds_name }}"

    ############################################################################
    # Modules zos_data_set, zos_fetch
    ############################################################################
    # +-------------------------------------------------------------------------
    # | 1. Create a sequential data set
    # | 2. Create a USS file and populate it with some data
    # | 3. Copy the USS file to the sequential data set
    # | 4. Create a PDS and a member within the PDS
    # | 5. Copy the sequential data set to the PDS member
    # | 6. Create a new PDS, replacing the existing one
    # | 7. Delete all data sets that were created during playbook execution
    # +-------------------------------------------------------------------------

    - name: Create a sequential data set
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ data_set_name }}"
        type: seq
        state: present
        replace: true
        format: fb
        record_length: 100
        size: 5M
      register: result

    - name: Response for data set creation
      debug:
        msg: "{{ result }}"

    - name: Create a USS file
      file:
        path: "{{ tgt_tmp_dir }}/HELLO"
        state: touch
      register: result

    - name: Response for USS file creation
      debug:
        msg: "{{ result }}"

    - name: zos_copy
      ibm.ibm_zos_core.zos_copy:
        src: "{{ playbook_dir }}/files/HELLO.jcl"
        dest: "{{ tgt_tmp_dir }}/HELLO"
       # remote_src: yes
      register: result

    - name: Response for populating USS file {{ tgt_tmp_dir }}/HELLO
        on target {{ inventory_hostname }}
      debug:
        msg: "{{ result }}"

    - name: Copy the USS file to the sequential data set
      ibm.ibm_zos_core.zos_copy:
        src: "{{ tgt_tmp_dir }}/HELLO"
        dest: "{{ data_set_name }}"
        remote_src: true
        dest_data_set:
          record_format: FB
          record_length: 100
      register: result

    - name: Response for copying USS file to data set
      debug:
        msg: "{{ result }}"

    - name: Create a PDS
      ibm.ibm_zos_core.zos_data_set:
        name: "{{ pds_name }}"
        type: pds
        size: 5M
        format: fba
        record_length: 100
      register: result

    - name: Response for creating the PDS
      debug:
        msg: "{{ result }}"

    - name: Create a PDS member
      zos_data_set:
        name: "{{ pds_name }}(HELLO)"
        type: MEMBER
      register: result

    - name: Response for creating the PDS member
      debug:
        msg: "{{ result }}"

    - name: Copy the sequential data set to PDS member
      ibm.ibm_zos_core.zos_copy:
        src: "{{ data_set_name }}"
        dest: "{{ pds_name }}(HELLO)"
        remote_src: true
      register: result

    - name: Response for copying {{ data_set_name }} to {{ pds_name }}(HELLO)
      debug:
        msg: "{{ result }}"

    - name: Delete the data sets
      ibm.ibm_zos_core.zos_data_set:
        batch:
          - name: "{{ data_set_name }}"
            state: absent
          - name: "{{ pds_name }}"
            state: absent
      register: result

    - name: Response for deleting the data sets
      debug:
        msg: "{{ result }}"

    - name: Clean up {{ tgt_tmp_dir }}
      file:
        path: "{{ tgt_tmp_dir }}/HELLO"
        state: absent