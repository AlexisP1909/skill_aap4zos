###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################

- name: Create CA and check it via TSO and operator commands.
  hosts: zos_host
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    owner_id: "{{ owner_id_survey | default('IBMUSER') }}"
    cert_label: "{{ cert_label_survey | default('TESTCA') }}"
    cn: '{{ cert_label }}'
    ou: "{{ ou_survey | default('ANSIBLE CORE') }}"
    country: "{{ country_survey | default('US') }}"
    keyring: "{{ keyring_survey | default('SharedRing1') }}"
    expiry_date: "{{ expiry_date_survey | default('') }}"
    check_name: "{{ check_name_survey | default('IBMRACF,RACF_CERTIFICATE_EXPIRATION') }}"

  tasks:
    - name: Check if keyring already exists and create it if it doesn't.
      block:
        - name: Check if keyring to be created already exists.
          ansible.builtin.include_role:
            name: issue_tso_cmd
          vars:
            issue_tso_cmd_task_description: 'Check if keyring to be created already exists.'
            issue_tso_cmd_command:
              - RACDCERT LISTRING({{ keyring }}) ID({{ owner_id }})
          register: issue_tso_cmd_keyring_check

        - name: Create a new keyring via TSO commands if keyring does not exist.
          ansible.builtin.include_role:
            name: issue_tso_cmd
          vars:
            issue_tso_cmd_task_description: 'Create a new keyring'
            issue_tso_cmd_command:
              - RACDCERT ADDRING({{ keyring }}) ID({{ owner_id }})
              - RACDCERT LISTRING({{ keyring }}) ID({{ owner_id }})
          when: "'IRRD114I Ring' + keyring + 'does not exist.' in issue_tso_cmd_keyring_check.output[0].content"

    - name: Create new CA cert and connect to keyring when expiry date is not empty via TSO commands.
      ansible.builtin.include_role:
        name: issue_tso_cmd
      vars:
        issue_tso_cmd_task_description: 'Create new CA cert and connect to keyring'
        issue_tso_cmd_command:
          - RACDCERT GENCERT CERTAUTH KEYUSAGE(CERTSIGN) SUBJECTSDN(CN('{{ cn }}') OU('{{ ou }}')\
           C('{{ country }}')) WITHLABEL('{{ cert_label }}') NOTAFTER(DATE({{ expiry_date }}))
          - RACDCERT ID({{ owner_id }}) CONNECT(CERTAUTH LABEL('{{ cert_label }}') RING({{ keyring }}))
      when: not expiry_date == ''

    - name: Create new CA cert and connect to keyring when expiry date is empty via TSO commands.
      ansible.builtin.include_role:
        name: issue_tso_cmd
      vars:
        issue_tso_cmd_task_description: 'Create new CA cert and connect to keyring'
        issue_tso_cmd_command:
          - RACDCERT GENCERT CERTAUTH KEYUSAGE(CERTSIGN) SUBJECTSDN(CN('{{ cn }}') OU('{{ ou }}') C('{{ country }}')) WITHLABEL('{{ cert_label }}')
          - RACDCERT ID({{ owner_id }}) CONNECT(CERTAUTH LABEL('{{ cert_label }}') RING({{ keyring }}))
      when: expiry_date == ''

    - name: Run Healther Checker via operator command.
      ansible.builtin.include_role:
        name: issue_operator_cmd
      vars:
        issue_operator_cmd_task_description: 'Run Health Checker'
        issue_operator_cmd_command: "F HZSPROC,RUN,CHECK=({{ check_name }})"
