---
- name: Generate an expired X.509 certificate.
  hosts: localhost
  gather_facts: false
  become: false
  tasks:

    - name: Generate private key.
      community.crypto.openssl_privatekey:
        path: "{{ playbook_dir }}/expired_cert/expired_key.pem"

    # - name: Generate expired certificate on controller.
    #   community.crypto.x509_certificate:
    #     path: "{{ playbook_dir }}/expired_cert/expired_cert.pem"
    #     privatekey_path: "{{ playbook_dir }}/expired_cert/expired_key.pem"
    #     provider: selfsigned
    #     selfsigned_not_before: +0s
    #     selfsigned_not_after: +1s

    - name: Install EPEL by bypassing repo checks
      ansible.builtin.command:
        cmd: "dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm --setopt=skip_if_unavailable=true"

    - name: Install faketime by bypassing repo checks
      ansible.builtin.command:
        cmd: "dnf install -y faketime --setopt=skip_if_unavailable=true"

    - name: Generate certificate in der format.
      shell: |
        faketime '2022-01-01 5 pm' /bin/bash -c 'openssl req -x509 -newkey rsa:4096 -keyout {{ playbook_dir }}/expired_cert/expired_key.pem -outform der -out {{ playbook_dir }}/expired_cert/expired_cert.der -days 1 -nodes'
      register: openssl_output
      failed_when: openssl_output.rc != 0

    - name: Copy to z/OS in binary.
      shell: |
        scp -i ~/.ssh/id_rsa {{ playbook_dir }}/expired_cert/expired_cert.der {{ hostvars[zos_host].ansible_user }}@{{ hostvars[zos_host].zos_ip }}:/tmp
      register: scp_output
      failed_when: scp_output.rc != 0

- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    owner_id: "{{ owner_id_survey | default('IBMUSER') }}"
    cert_label: "{{ cert_label_survey | default('EXPIRED') }}"

  tasks:

    - name: Copy expired cert contents to folder on z/OS host.
      copy:
        src: "{{ playbook_dir }}/expired_cert/expired_cert.pem"
        dest: /tmp/expired_cert.der

    - name: Copy the USS file to a sequential data.
      zos_copy:
        src: /tmp/expired_cert.der
        dest: "{{ owner_id }}.CERTS.EXPIRED"
        remote_src: true
        force: true
        dest_data_set:
          type: SEQ
          record_format: VB
          record_length: 1024
          block_size: 4096
      register: copy_to_ds

    - name: Add expired certificate to RACF.
      zos_tso_command:
        commands:
          - "RACDCERT ADD('{{ owner_id }}.CERTS.EXPIRED') ID({{ owner_id }}) NOTRUST WITHLABEL('{{ cert_label }}')"
          - "SETROPTS RACLIST(DIGTCERT, DIGTRING) REFRESH"