###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################

- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    owner_id: "{{ owner_id_survey | default('IBMUSER') }}"
    cert_label: "{{ cert_label_survey | default('TEST USER') }}"
    sign_label: "{{ cert_label_survey | default('TEST CA') }}"
    cn: "{{ cn_survey }}"
    ou: "{{ ou_survey | default('ANSIBLE CORE') }}"
    country: "{{ country_survey | default('US') }}"
    expiry_date: "{{ expiry_date_survey | default('2030-01-01') }}"
    keyring: "{{ keyring_survey | default('SharedRing1') }}"
    check_name: "{{ check_name_survey | default('IBMRACF,RACF_CERTIFICATE_EXPIRATION') }}"

  tasks:
    - block:
        - include_role:
            name: issue_tso_cmd
          vars:
            task_description: 'Clean up certs and keyring'
            command:
              - RACDCERT ADDRING({{keyring}}) ID({{owner_id}})
              - RACDCERT LISTRING({{keyring}}) ID({{ owner_id}})
      ignore_errors: true

    - name: Get FQDN of this z/OS server from USS, if cn is undefined.
      command: hostname
      when: cn is undefined
      register: get_hostname

    - name: Set cn fact from previous task, if cn is undefined.
      set_fact:
        cn: "{{ get_hostname.stdout }}"
      when: cn is undefined

    - include_role:
        name: issue_tso_cmd
      vars:
        task_description: 'Create new self-signed USER cert and connect to keyring'
        command:
          - RACDCERT GENCERT ID({{owner_id}}) SUBJECTSDN(CN('{{cn}}') OU('{{ou}}') C('{{country}}')) WITHLABEL('{{cert_label}}') NOTAFTER(DATE({{expiry_date}}))
          - RACDCERT ID({{owner_id}}) CONNECT(LABEL('{{cert_label}}') RING({{keyring}}) DEFAULT)
          - RACDCERT LISTRING({{keyring}}) ID({{owner_id}})
          - RACDCERT LISTCHAIN(LABEL('{{cert_label}}')) ID({{owner_id}})
      when: sign_label == ' ' and not expiry_date == ''

    - include_role:
        name: issue_tso_cmd
      vars:
        task_description: 'Create new local-CA-signed USER cert and connect to keyring'
        command:
          - RACDCERT GENCERT ID({{owner_id}}) SUBJECTSDN(CN('{{cn}}') OU('{{ou}}') C('{{country}}')) WITHLABEL('{{cert_label}}') SIGNWITH(CERTAUTH LABEL('{{sign_label}}')) NOTAFTER(DATE({{expiry_date}}))
          - RACDCERT ID({{owner_id}})  CONNECT(LABEL('{{cert_label}}')  RING({{keyring}}) DEFAULT)
          - RACDCERT LISTRING({{keyring}}) ID({{owner_id}})
          - RACDCERT LISTCHAIN(LABEL('{{cert_label}}')) ID({{owner_id}})
      when: not sign_label == ' ' and not expiry_date == ''

    - include_role:
        name: issue_tso_cmd
      vars:
        task_description: 'Create new self-signed USER cert and connect to keyring'
        command:
          - RACDCERT GENCERT ID({{owner_id}})  SUBJECTSDN(CN('{{cn}}')  OU('{{ou}}') C('{{country}}'))  WITHLABEL('{{cert_label}}')
          - RACDCERT ID({{owner_id}}) CONNECT(LABEL('{{cert_label}}') RING({{keyring}}) DEFAULT)
          - RACDCERT LISTRING({{keyring}}) ID({{owner_id}})
          - RACDCERT LISTCHAIN(LABEL('{{cert_label}}')) ID({{owner_id}})
      when: sign_label == ' ' and expiry_date == ''

    - include_role:
        name: issue_tso_cmd
      vars:
        task_description: 'Create new local-CA-signed USER cert and connect to keyring'
        command:
          - RACDCERT GENCERT ID({{owner_id}}) SUBJECTSDN(CN('{{cn}}') OU('{{ou}}') C('{{country}}')) WITHLABEL('{{cert_label}}') SIGNWITH(CERTAUTH LABEL('{{sign_label}}'))
          - RACDCERT ID({{owner_id}}) CONNECT(LABEL('{{cert_label}}') RING({{keyring}}) DEFAULT)
          - RACDCERT LISTRING({{keyring}}) ID({{owner_id}})
          - RACDCERT LISTCHAIN (LABEL('{{cert_label}}')) ID({{owner_id}})
      when: not sign_label == ' ' and expiry_date == ''

    - include_role:
        name: issue_operator_cmd
      vars:
        task_description: 'Run Health Check for {{check_name}}'
        command: "F HZSPROC,RUN,CHECK=({{check_name}})"
