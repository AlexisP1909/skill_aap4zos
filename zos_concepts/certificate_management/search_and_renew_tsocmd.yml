###############################################################################
# Â© Copyright IBM Corporation 2020, 2021
###############################################################################

- name: Search for expiring certificate and renew it.
  hosts: zos_host
  gather_facts: false
  environment: "{{ environment_vars }}"
  vars:
    cert_label: "{{ cert_label_survey }}"
    cert_type: "{{ cert_type_survey }}"
    sign_with: "{{ sign_with_survey | default('Self') }}"
    sign_label: "{{ sign_label_survey | default('') }}"
    owner_id: "{{ owner_id_survey }}"
    keyring: "{{ keyring_survey }}"

    cert_found: false
    today: ''

  tasks:
    - name: Run health check via operator command.
      tags: search_and_renew, search, run_hc
      ibm.ibm_zos_core.zos_operator:
        cmd: "F HZSPROC,RUN,CHECK=(IBMRACF,RACF_CERTIFICATE_EXPIRATION)"

    - name: Get sysname.
      tags: search_and_renew, search, search_hc
      ansible.builtin.command:
        cmd: sysvar SYSNAME
      changed_when: false
      register: sysname

    - name: Submit job to run health check.
      tags: search_and_renew, search, search_hc
      ibm.ibm_zos_core.zos_job_submit:
        src: "{{ playbook_dir }}/templates/HZPRINT.jcl.j2"
        location: LOCAL
        wait_time_s: 60
      register: hc_job_output

    - name: 'Search report for {{ cert_label }}.'
      tags: search_and_renew, search, search_hc
      ansible.builtin.set_fact:
        cert_found: true
      with_items: "{{ hc_job_output.jobs.0.ddnames }}"
      when: item.content is search(cert_label)
      no_log: true

    - name: Print whether or not certificate is expiring.
      tags: search_and_renew, search, search_hc
      ansible.builtin.debug:
        msg: "{{ cert_label }} expiring - {{ cert_found }}"

    - name: Renew certificate if it is expiring.
      when: cert_found
      block:
        - name: Get date for timestamps.
          tags: always
          ansible.builtin.command: "date '+%b%d%y'"
          register: date_result
          changed_when: false

        - name: Set variables for use in the rest of this block of tasks.
          tags: always
          ansible.builtin.set_fact:
            today: "{{ date_result.stdout }}"
            format_cert_type: "{{ 'ID(' + owner_id + ')' if cert_type == 'USER' else cert_type }}"

        - name: Back up current certificate.
          tags: search_and_renew, renew, backup
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT EXPORT(LABEL('{{ cert_label }}')) {{ format_cert_type }} DSN('{{ owner_id }}.CERT.{{ cert_type }}.BACKUP.{{ today }}')

        - name: List backup certificate.
          tags: search_and_renew, renew, backup
          vars:
            format_check_cert: "{{ 'ID(' + owner_id + ')' if cert_type == 'USER' else '' }}"
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT CHECKCERT('{{ owner_id }}.CERT.{{ cert_type }}.BACKUP.{{ today }}') {{ format_check_cert }}

        - name: Rekey certificate with new temporary label.
          tags: search_and_renew, renew, rekey
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} REKEY(LABEL('{{ cert_label }}')) WITHLABEL('{{ cert_label }}-NEW')
          notify: Setropts refresh

        - name: List new certificate.
          tags: search_and_renew, renew, list_new
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} LIST(LABEL('{{ cert_label }}-NEW'))

        - name: Generate request for new certificate.
          tags: search_and_renew, renew, genreq
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} GENREQ (LABEL('{{ cert_label }}-NEW')) DSN('{{ owner_id }}.CSR.{{ cert_type }}.{{ today }}')

        - name: Delete old certificate.
          tags: search_and_renew, renew, delete
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} DELETE(LABEL('{{ cert_label }}'))
          notify: Setropts refresh

        - name: Install and connect local cert.
          tags: search_and_renew, renew, install
          vars:
            format_sign_with: "{{ sign_with + ' ' if sign_with != 'Self' else '' }}"
            format_label: "{{ sign_label if sign_with != 'Self' else cert_label + '-NEW' }}"
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} GENCERT('{{ owner_id }}.CSR.{{ cert_type }}.{{ today }}') SIGNWITH({{ format_sign_with }}LABEL('{{ format_label }}'))
          notify: Setropts refresh

        - name: Relabel new certificate to old name.
          tags: search_and_renew, renew, relabel
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT {{ format_cert_type }} ALTER(LABEL('{{ cert_label }}-NEW')) NEWLABEL('{{ cert_label }}')

        - name: Connect renewed certificate to keyring.
          tags: search_and_renew, renew, connect
          vars:
            format_usage: "{{ 'PERSONAL' if cert_type == 'USER' else cert_type }}"
          ibm.ibm_zos_core.zos_tso_command:
            commands: RACDCERT ID({{ owner_id }}) CONNECT({{ format_cert_type }} LABEL('{{ cert_label }}') RING({{ keyring }}) DEFAULT USAGE({{ format_usage }}))

  handlers:
    - name: Setropts refresh
      ibm.ibm_zos_core.zos_tso_command:
        commands: SETROPTS RACLIST(DIGTCERT) REFRESH
