---
- hosts: zos_host
  collections:
    - ibm.ibm_zos_core
  gather_facts: false
  vars:
    tgt_tmp_dir: "/tmp"
    job_name: "{{ jcl | default('HELLO') }}"
    data_set_name: IBMUSER.JOB.SUBMIT
    tgt_tmp_dir: /tmp
  environment: "{{ environment_vars }}"
  tasks:

    - name: Create a PDS data set {{ data_set_name }}
      zos_data_set:
        name: "{{ data_set_name }}"
        type: pds
        size: 5M
        format: fb
        record_length: 80
        replace: true
      register: create_pds

    - name: Response for create a PDS data set {{ data_set_name }}
      debug:
        msg: "{{ create_pds }}"

    - name: Ensure JCL folder exists in USS to manage JCL
      file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl"
        state: directory
      register: create_dir

    - name: Response for ensure JCL folder exists in USS to manage JCL
      debug:
        msg: "{{ create_dir }}"

    - name: Ensure {{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER does not already exists in USS, for idempotency
      file:
        path: "{{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER"
        state: absent
      register: delete_file

    - name: Response for deleting USS file.
      debug:
        msg: "{{ delete_file }}"

    - name: Write BPX_NEW_USER JCL to USS in {{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER"
        on target {{ inventory_hostname }}
      zos_copy:
        src: "{{ playbook_dir }}/files/BPX_NEW_USER.jcl"
        dest: "{{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER"
      register: result

    - name: Response for write BPX_NEW_USER JCL to USS
        in {{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER" on
        target {{ inventory_hostname }}
      debug:
        msg: "{{ result }}"

    - name: Populate {{ data_set_name }} member with data from USS file
        in {{ tgt_tmp_dir }}/ansible/jcl
      zos_copy:
        src: "{{ tgt_tmp_dir }}/ansible/jcl/BPX_NEW_USER"
        remote_src: true
        dest: "{{ data_set_name }}(MEM1)"
      register: result

    - name: Response for populate {{ data_set_name }} member with data from
        USS file in {{ tgt_tmp_dir }}/ansible/jcl
      debug:
        msg: "{{ result }}"

    - name: Submit the JCL {{ data_set_name }}(MEM1)
      zos_job_submit:
        src: "{{ data_set_name }}(MEM{{ item }})"
        location: DATA_SET
      register: job_submit
      with_sequence: count=1

    - name: Response for submit the JCL {{ data_set_name }}.(MEM1)
      debug:
        msg: "{{ job_submit }}"

    # - name: Submit {{ job_name }} job.
    #   zos_job_submit:
    #     src: "{{ playbook_dir }}/files/{{ job_name }}.jcl"
    #     location: LOCAL
    #     wait_time_s: 60
    #     encoding:
    #       from: UTF-8
    #       to: IBM-037
    #   register: job_submit
    #   ignore_errors: true

    # - name: Set fact with results from job submission.
    #   set_fact:
    #     job_results: "{{ job_submit }}"

    # - name: Set facts used in this playbook based on results.
    #   set_fact:
    #     submit_job_name: "{{ job_results.jobs[0].job_name }}"
    #     submit_job_id: "{{ job_results.jobs[0].job_id }}"
    #     submit_jobs_ddnames_length: "{{ job_results.jobs[0].ddnames |length }}"
    #     submit_job_ddnames_list: "{{ job_results.jobs[0].ddnames }}"
    #     submit_job_list: "{{ job_results.jobs[0] }}"
    #     submit_job_ret_code: "{{ job_results.jobs[0].ret_code.code }}"
    #     submit_job_ret_code_msg: "{{ job_results.jobs[0].ret_code.msg }}"
    #     submit_job_subsystem: "{{ job_results.jobs[0].subsystem }}"

    # - name: Print results for job {{ submit_job_name }}
    #   debug:
    #     msg:
    #       - Job name={{ submit_job_name }}
    #       - Subsystem={{ submit_job_subsystem }}
    #       - Job ID={{ submit_job_id }}
    #       - DD Count={{ submit_jobs_ddnames_length }}
    #       - "{{ submit_job_ddnames_list }}"
    #       - "{{ submit_job_list }}"
    #       - Return Code={{ submit_job_ret_code }}
    #       - Return Code Message={{ submit_job_ret_code_msg }}

    # - name: Get job output for job ID {{ submit_job_id }}
    #   zos_job_output:
    #     job_id: "{{ submit_job_id }}"
    #   register: job_output_result

    # - name: Result for get job output for job ID {{submit_job_id}}
    #   debug:
    #     msg: "{{ job_output_result }}"

    # - name: Debug return code variable.
    #   debug:
    #     var: job_results.jobs[0].ret_code.code